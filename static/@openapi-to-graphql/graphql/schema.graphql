type Query {
  """
  Actions by account.
  
  Equivalent to GET /actions/account/{account}
  """
  actionsAccount(account: String!, limit: Int, page: Int): ActionsAccount

  """
  Actions by date.
  
  Equivalent to GET /actions/date/{date}
  """
  actionsDate(date: String!, limit: Int, page: Int): ActionsDate

  """
  Actions by name.
  
  Equivalent to GET /actions/name/{name}
  """
  actionsName(limit: Int, name: String!, page: Int): ActionsName

  """
  Blocks by date.
  
  Equivalent to GET /blocks/date/{date}
  """
  blocksDate(date: String!, limit: Int, page: Int): BlocksDate

  """
  Blocks by hash.
  
  Equivalent to GET /blocks/hash/{hash}
  """
  blocksHash(hash: String!, limit: Int, page: Int): BlocksHash

  """
  Blocks by block number.
  
  Equivalent to GET /blocks/number/{number}
  """
  blocksNumber(limit: Int, number: Int!, page: Int): BlocksNumber

  """
  DBOp by date.
  
  Equivalent to GET /dbops/date/{date}
  """
  dbopsDate(date: String!, limit: Int, page: Int): DbopsDate

  """
  DBOp by primary key.
  
  Equivalent to GET /dbops/pk/{pk}
  """
  dbopsPk(limit: Int, page: Int, pk: String!): DbopsPk

  """
  DBOps by contract.DBOp by scope.
  
  Equivalent to GET /dbops/scope/{scope}
  """
  dbopsScope(limit: Int, page: Int, scope: String!): DbopsScope

  """
  Checks database connection.
  
  Equivalent to GET /health
  """
  health: String

  """
  Prometheus metrics.
  
  Equivalent to GET /metrics
  """
  metrics: String

  """
  Reflection endpoint to return OpenAPI JSON spec. Also used by Swagger to generate the frontpage.
  
  Equivalent to GET /openapi
  """
  openapi: JSON

  """
  Transactions by date.
  
  Equivalent to GET /transactions/date/{date}
  """
  transactionsDate(date: String!, limit: Int, page: Int): TransactionsDate

  """
  Transactions by hash.
  
  Equivalent to GET /transactions/hash/{hash}
  """
  transactionsHash(hash: String!, limit: Int, page: Int): TransactionsHash

  """
  Api version and Git short commit hash.
  
  Equivalent to GET /version
  """
  version: Version
}

type ActionsAccount {
  data: [ModelsActions]!
  meta: ResponseMetadata!
}

type ModelsActions {
  abi_sequence: Int!
  account: String!
  action_mroot: String!
  block_date: String!
  block_hash: String!
  block_number: Int!
  block_time: String!
  closest_unnotified_ancestor_action_ordinal: Int!
  code_sequence: Int!
  console: String!
  context_free: Boolean!
  creator_action_ordinal: Int!
  digest: String!
  elapsed: BigInt!
  execution_index: Int!
  global_sequence: Int!
  index: Int!
  json_data: String!
  json_return_value: String!
  name: String!
  raw_data: String!
  raw_return_value: String!
  receipt_receiver: String!
  receiver: String!
  recv_sequence: Int!
  tx_hash: String!
  tx_index: Int!
  tx_status: String!
  tx_status_code: Int!
  tx_success: Boolean!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type ResponseMetadata {
  next_page: BigInt!
  previous_page: BigInt!
  statistics: Statistics!
  total_pages: BigInt!
  total_results: BigInt!
}

type Statistics {
  bytes_read: BigInt!
  elapsed: Float!
  rows_read: BigInt!
}

type ActionsDate {
  data: [ModelsActions]!
  meta: ResponseMetadata!
}

type ActionsName {
  data: [ModelsActions]!
  meta: ResponseMetadata!
}

type BlocksDate {
  data: [ModelsBlocks]!
  meta: ResponseMetadata!
}

type ModelsBlocks {
  action_mroot: String!
  blockroot_merkle_node_count: Int!
  confirmed: Int!
  date: String!
  dpos_irreversible_blocknum: Int!
  dpos_proposed_irreversible_blocknum: Int!
  failed_transactions: Int!
  hash: String!
  number: Int!
  parent_hash: String!
  producer: String!
  producer_signature: String!
  schedule_version: Int!
  size: Int!
  successful_transactions: Int!
  time: String!
  total_actions: Int!
  total_db_ops: Int!
  total_transactions: Int!
  transaction_mroot: String!
  version: Int!
}

type BlocksHash {
  data: [ModelsBlocks]!
  meta: ResponseMetadata!
}

type BlocksNumber {
  data: [ModelsBlocks]!
  meta: ResponseMetadata!
}

type DbopsDate {
  data: [ModelsDBOps]!
  meta: ResponseMetadata!
}

type ModelsDBOps {
  action_index: Int!
  block_date: String!
  block_hash: String!
  block_number: Int!
  block_time: String!
  code: String!
  index: Int!
  new_data: String!
  new_data_json: String!
  new_payer: String!
  old_data: String!
  old_data_json: String!
  old_payer: String!
  operation: String!
  operation_code: Int!
  primary_key: String!
  scope: String!
  table_name: String!
  tx_hash: String!
  tx_index: Int!
  tx_status: String!
  tx_status_code: Int!
  tx_success: Boolean!
}

type DbopsPk {
  data: [ModelsDBOps]!
  meta: ResponseMetadata!
}

type DbopsScope {
  data: [ModelsDBOps]!
  meta: ResponseMetadata!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type TransactionsDate {
  data: [ModelsTransactions]!
  meta: ResponseMetadata!
}

type ModelsTransactions {
  block_date: String!
  block_hash: String!
  block_number: Int!
  block_time: String!
  cpu_usage_micro_seconds: Int!
  elapsed: BigInt!
  hash: String!
  index: Int!
  net_usage: Int!
  net_usage_words: Int!
  scheduled: Boolean!
  status: String!
  status_code: Int!
  success: Boolean!
  transaction_mroot: String!
}

type TransactionsHash {
  data: [ModelsTransactions]!
  meta: ResponseMetadata!
}

type Version {
  commit: String!
  version: String!
}